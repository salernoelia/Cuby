{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-chord/src/chord.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {max, tau} from \"./math.js\";\n\nfunction range(i, j) {\n  return Array.from({length: j - i}, (_, k) => i + k);\n}\n\nfunction compareValue(compare) {\n  return function(a, b) {\n    return compare(\n      a.source.value + a.target.value,\n      b.source.value + b.target.value\n    );\n  };\n}\n\nexport default function() {\n  return chord(false, false);\n}\n\nexport function chordTranspose() {\n  return chord(false, true);\n}\n\nexport function chordDirected() {\n  return chord(true, false);\n}\n\nfunction chord(directed, transpose) {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = new Array(n),\n        groupIndex = range(0, n),\n        chords = new Array(n * n),\n        groups = new Array(n),\n        k = 0, dx;\n\n    matrix = Float64Array.from({length: n * n}, transpose\n        ? (_, i) => matrix[i % n][i / n | 0]\n        : (_, i) => matrix[i / n | 0][i % n]);\n\n    // Compute the scaling factor from value to angle in [0, 2pi].\n    for (let i = 0; i < n; ++i) {\n      let x = 0;\n      for (let j = 0; j < n; ++j) x += matrix[i * n + j] + directed * matrix[j * n + i];\n      k += groupSums[i] = x;\n    }\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n;\n\n    // Compute the angles for each group and constituent chord.\n    {\n      let x = 0;\n      if (sortGroups) groupIndex.sort((a, b) => sortGroups(groupSums[a], groupSums[b]));\n      for (const i of groupIndex) {\n        const x0 = x;\n        if (directed) {\n          const subgroupIndex = range(~n + 1, n).filter(j => j < 0 ? matrix[~j * n + i] : matrix[i * n + j]);\n          if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]));\n          for (const j of subgroupIndex) {\n            if (j < 0) {\n              const chord = chords[~j * n + i] || (chords[~j * n + i] = {source: null, target: null});\n              chord.target = {index: i, startAngle: x, endAngle: x += matrix[~j * n + i] * k, value: matrix[~j * n + i]};\n            } else {\n              const chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});\n              chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};\n            }\n          }\n          groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};\n        } else {\n          const subgroupIndex = range(0, n).filter(j => matrix[i * n + j] || matrix[j * n + i]);\n          if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(matrix[i * n + a], matrix[i * n + b]));\n          for (const j of subgroupIndex) {\n            let chord;\n            if (i < j) {\n              chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});\n              chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};\n            } else {\n              chord = chords[j * n + i] || (chords[j * n + i] = {source: null, target: null});\n              chord.target = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};\n              if (i === j) chord.source = chord.target;\n            }\n            if (chord.source && chord.target && chord.source.value < chord.target.value) {\n              const source = chord.source;\n              chord.source = chord.target;\n              chord.target = source;\n            }\n          }\n          groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};\n        }\n        x += dx;\n      }\n    }\n\n    // Remove empty chords.\n    chords = Object.values(chords);\n    chords.groups = groups;\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function(_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function(_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function(_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function(_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}\n",
      "start": 1707671529530,
      "end": 1707671529546,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707671529546,
      "end": 1707671529546,
      "order": "normal"
    }
  ]
}
