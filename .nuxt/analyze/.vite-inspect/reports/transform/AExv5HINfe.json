{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-selection/src/selection/data.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {Selection} from \"./index.js\";\nimport {EnterNode} from \"./enter.js\";\nimport constant from \"../constant.js\";\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + \"\";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + \"\";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\nexport default function(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n\n// Given some data, this returns an array-like view of it: an object that\n// exposes a length property and allows numeric indexing. Note that unlike\n// selectAll, this isn’t worried about “live” collections because the resulting\n// array will only be used briefly while data is being bound. (It is possible to\n// cause the data to change while iterating by using a key function, but please\n// don’t; we’d rather avoid a gratuitous copy.)\nfunction arraylike(data) {\n  return typeof data === \"object\" && \"length\" in data\n    ? data // Array, TypedArray, NodeList, array-like\n    : Array.from(data); // Map, Set, iterable, string, or anything else\n}\n",
      "start": 1710766540706,
      "end": 1710766540721,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710766540721,
      "end": 1710766540721,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710766540721,
      "end": 1710766540722,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710766540722,
      "end": 1710766540722,
      "order": "normal"
    }
  ]
}
