{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-scale/src/continuous.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n",
      "start": 1710766540728,
      "end": 1710766540741,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710766540741,
      "end": 1710766540741,
      "order": "normal"
    }
  ]
}
