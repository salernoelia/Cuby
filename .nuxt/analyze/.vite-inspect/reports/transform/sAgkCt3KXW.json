{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-geo/src/clip/rejoin.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import pointEqual from \"../pointEqual.js\";\nimport {epsilon} from \"../math.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n      // handle degenerate cases by moving the point\n      p1[0] += 2 * epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n",
      "start": 1707611014443,
      "end": 1707611014454,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707611014454,
      "end": 1707611014454,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707611014455,
      "end": 1707611014455,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707611014455,
      "end": 1707611014455,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707611014455,
      "end": 1707611014455,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707611014455,
      "end": 1707611014455,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707611014455,
      "end": 1707611014455,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707611014455,
      "end": 1707611014455,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707611014455,
      "end": 1707611014455,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707611014455,
      "end": 1707611014455,
      "order": "normal"
    }
  ]
}
