{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-contour/src/contours.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {extent, nice, thresholdSturges, ticks} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport ascending from \"./ascending.js\";\nimport area from \"./area.js\";\nimport constant from \"./constant.js\";\nimport contains from \"./contains.js\";\nimport noop from \"./noop.js\";\n\nvar cases = [\n  [],\n  [[[1.0, 1.5], [0.5, 1.0]]],\n  [[[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [0.5, 1.0]]],\n  [[[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 0.5], [1.0, 1.5]]],\n  [[[1.0, 0.5], [0.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 0.5]]],\n  [[[1.0, 1.5], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.5, 1.0]]],\n  [[[1.0, 1.5], [1.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 1.5]]],\n  []\n];\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      threshold = thresholdSturges,\n      smooth = smoothLinear;\n\n  function contours(values) {\n    var tz = threshold(values);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      const e = extent(values, finite);\n      tz = ticks(...nice(e[0], e[1], tz), tz);\n      while (tz[tz.length - 1] >= e[1]) tz.pop();\n      while (tz[1] < e[0]) tz.shift();\n    } else {\n      tz = tz.slice().sort(ascending);\n    }\n\n    return tz.map(value => contour(values, value));\n  }\n\n  // Accumulate, smooth contour rings, assign holes to exterior rings.\n  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n  function contour(values, value) {\n    const v = value == null ? NaN : +value;\n    if (isNaN(v)) throw new Error(`invalid value: ${value}`);\n\n    var polygons = [],\n        holes = [];\n\n    isorings(values, v, function(ring) {\n      smooth(ring, values, v);\n      if (area(ring) > 0) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n        if (contains((polygon = polygons[i])[0], hole) !== -1) {\n          polygon.push(hole);\n          return;\n        }\n      }\n    });\n\n    return {\n      type: \"MultiPolygon\",\n      value: value,\n      coordinates: polygons\n    };\n  }\n\n  // Marching squares with isolines stitched into rings.\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n  function isorings(values, value, callback) {\n    var fragmentByStart = new Array,\n        fragmentByEnd = new Array,\n        x, y, t0, t1, t2, t3;\n\n    // Special case for the first row (y = -1, t2 = t3 = 0).\n    x = y = -1;\n    t1 = above(values[0], value);\n    cases[t1 << 1].forEach(stitch);\n    while (++x < dx - 1) {\n      t0 = t1, t1 = above(values[x + 1], value);\n      cases[t0 | t1 << 1].forEach(stitch);\n    }\n    cases[t1 << 0].forEach(stitch);\n\n    // General case for the intermediate rows.\n    while (++y < dy - 1) {\n      x = -1;\n      t1 = above(values[y * dx + dx], value);\n      t2 = above(values[y * dx], value);\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\n      while (++x < dx - 1) {\n        t0 = t1, t1 = above(values[y * dx + dx + x + 1], value);\n        t3 = t2, t2 = above(values[y * dx + x + 1], value);\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n      }\n      cases[t1 | t2 << 3].forEach(stitch);\n    }\n\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n    x = -1;\n    t2 = values[y * dx] >= value;\n    cases[t2 << 2].forEach(stitch);\n    while (++x < dx - 1) {\n      t3 = t2, t2 = above(values[y * dx + x + 1], value);\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\n    }\n    cases[t2 << 3].forEach(stitch);\n\n    function stitch(line) {\n      var start = [line[0][0] + x, line[0][1] + y],\n          end = [line[1][0] + x, line[1][1] + y],\n          startIndex = index(start),\n          endIndex = index(end),\n          f, g;\n      if (f = fragmentByEnd[startIndex]) {\n        if (g = fragmentByStart[endIndex]) {\n          delete fragmentByEnd[f.end];\n          delete fragmentByStart[g.start];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\n          }\n        } else {\n          delete fragmentByEnd[f.end];\n          f.ring.push(end);\n          fragmentByEnd[f.end = endIndex] = f;\n        }\n      } else if (f = fragmentByStart[endIndex]) {\n        if (g = fragmentByEnd[startIndex]) {\n          delete fragmentByStart[f.start];\n          delete fragmentByEnd[g.end];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\n          }\n        } else {\n          delete fragmentByStart[f.start];\n          f.ring.unshift(start);\n          fragmentByStart[f.start = startIndex] = f;\n        }\n      } else {\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\n      }\n    }\n  }\n\n  function index(point) {\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\n  }\n\n  function smoothLinear(ring, values, value) {\n    ring.forEach(function(point) {\n      var x = point[0],\n          y = point[1],\n          xt = x | 0,\n          yt = y | 0,\n          v1 = valid(values[yt * dx + xt]);\n      if (x > 0 && x < dx && xt === x) {\n        point[0] = smooth1(x, valid(values[yt * dx + xt - 1]), v1, value);\n      }\n      if (y > 0 && y < dy && yt === y) {\n        point[1] = smooth1(y, valid(values[(yt - 1) * dx + xt]), v1, value);\n      }\n    });\n  }\n\n  contours.contour = contour;\n\n  contours.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, contours;\n  };\n\n  contours.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;\n  };\n\n  contours.smooth = function(_) {\n    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;\n  };\n\n  return contours;\n}\n\n// When computing the extent, ignore infinite values (as well as invalid ones).\nfunction finite(x) {\n  return isFinite(x) ? x : NaN;\n}\n\n// Is the (possibly invalid) x greater than or equal to the (known valid) value?\n// Treat any invalid value as below negative infinity.\nfunction above(x, value) {\n  return x == null ? false : +x >= value;\n}\n\n// During smoothing, treat any invalid value as negative infinity.\nfunction valid(v) {\n  return v == null || isNaN(v = +v) ? -Infinity : v;\n}\n\nfunction smooth1(x, v0, v1, value) {\n  const a = value - v0;\n  const b = v1 - v0;\n  const d = isFinite(a) || isFinite(b) ? a / b : Math.sign(a) / Math.sign(b);\n  return isNaN(d) ? x : x + d - 0.5;\n}\n",
      "start": 1707675067399,
      "end": 1707675067422,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707675067422,
      "end": 1707675067422,
      "order": "normal"
    }
  ]
}
