{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-drag/src/drag.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {dispatch} from \"d3-dispatch\";\nimport {select, pointer} from \"d3-selection\";\nimport nodrag, {yesdrag} from \"./nodrag.js\";\nimport noevent, {nonpassive, nonpassivecapture, nopropagation} from \"./noevent.js\";\nimport constant from \"./constant.js\";\nimport DragEvent from \"./event.js\";\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultContainer() {\n  return this.parentNode;\n}\n\nfunction defaultSubject(event, d) {\n  return d == null ? {x: event.x, y: event.y} : d;\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\nexport default function() {\n  var filter = defaultFilter,\n      container = defaultContainer,\n      subject = defaultSubject,\n      touchable = defaultTouchable,\n      gestures = {},\n      listeners = dispatch(\"start\", \"drag\", \"end\"),\n      active = 0,\n      mousedownx,\n      mousedowny,\n      mousemoving,\n      touchending,\n      clickDistance2 = 0;\n\n  function drag(selection) {\n    selection\n        .on(\"mousedown.drag\", mousedowned)\n      .filter(touchable)\n        .on(\"touchstart.drag\", touchstarted)\n        .on(\"touchmove.drag\", touchmoved, nonpassive)\n        .on(\"touchend.drag touchcancel.drag\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  function mousedowned(event, d) {\n    if (touchending || !filter.call(this, event, d)) return;\n    var gesture = beforestart(this, container.call(this, event, d), event, d, \"mouse\");\n    if (!gesture) return;\n    select(event.view)\n      .on(\"mousemove.drag\", mousemoved, nonpassivecapture)\n      .on(\"mouseup.drag\", mouseupped, nonpassivecapture);\n    nodrag(event.view);\n    nopropagation(event);\n    mousemoving = false;\n    mousedownx = event.clientX;\n    mousedowny = event.clientY;\n    gesture(\"start\", event);\n  }\n\n  function mousemoved(event) {\n    noevent(event);\n    if (!mousemoving) {\n      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;\n      mousemoving = dx * dx + dy * dy > clickDistance2;\n    }\n    gestures.mouse(\"drag\", event);\n  }\n\n  function mouseupped(event) {\n    select(event.view).on(\"mousemove.drag mouseup.drag\", null);\n    yesdrag(event.view, mousemoving);\n    noevent(event);\n    gestures.mouse(\"end\", event);\n  }\n\n  function touchstarted(event, d) {\n    if (!filter.call(this, event, d)) return;\n    var touches = event.changedTouches,\n        c = container.call(this, event, d),\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {\n        nopropagation(event);\n        gesture(\"start\", event, touches[i]);\n      }\n    }\n  }\n\n  function touchmoved(event) {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        noevent(event);\n        gesture(\"drag\", event, touches[i]);\n      }\n    }\n  }\n\n  function touchended(event) {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        nopropagation(event);\n        gesture(\"end\", event, touches[i]);\n      }\n    }\n  }\n\n  function beforestart(that, container, event, d, identifier, touch) {\n    var dispatch = listeners.copy(),\n        p = pointer(touch || event, container), dx, dy,\n        s;\n\n    if ((s = subject.call(that, new DragEvent(\"beforestart\", {\n        sourceEvent: event,\n        target: drag,\n        identifier,\n        active,\n        x: p[0],\n        y: p[1],\n        dx: 0,\n        dy: 0,\n        dispatch\n      }), d)) == null) return;\n\n    dx = s.x - p[0] || 0;\n    dy = s.y - p[1] || 0;\n\n    return function gesture(type, event, touch) {\n      var p0 = p, n;\n      switch (type) {\n        case \"start\": gestures[identifier] = gesture, n = active++; break;\n        case \"end\": delete gestures[identifier], --active; // falls through\n        case \"drag\": p = pointer(touch || event, container), n = active; break;\n      }\n      dispatch.call(\n        type,\n        that,\n        new DragEvent(type, {\n          sourceEvent: event,\n          subject: s,\n          target: drag,\n          identifier,\n          active: n,\n          x: p[0] + dx,\n          y: p[1] + dy,\n          dx: p[0] - p0[0],\n          dy: p[1] - p0[1],\n          dispatch\n        }),\n        d\n      );\n    };\n  }\n\n  drag.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), drag) : filter;\n  };\n\n  drag.container = function(_) {\n    return arguments.length ? (container = typeof _ === \"function\" ? _ : constant(_), drag) : container;\n  };\n\n  drag.subject = function(_) {\n    return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant(_), drag) : subject;\n  };\n\n  drag.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), drag) : touchable;\n  };\n\n  drag.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? drag : value;\n  };\n\n  drag.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\n  };\n\n  return drag;\n}\n",
      "start": 1707611014161,
      "end": 1707611014192,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707611014192,
      "end": 1707611014192,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707611014192,
      "end": 1707611014193,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707611014193,
      "end": 1707611014193,
      "order": "normal"
    }
  ]
}
