{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-hierarchy/src/stratify.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {optional} from \"./accessors.js\";\nimport {Node, computeHeight} from \"./hierarchy/index.js\";\n\nvar preroot = {depth: -1},\n    ambiguous = {},\n    imputed = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nexport default function() {\n  var id = defaultId,\n      parentId = defaultParentId,\n      path;\n\n  function stratify(data) {\n    var nodes = Array.from(data),\n        currentId = id,\n        currentParentId = parentId,\n        n,\n        d,\n        i,\n        root,\n        parent,\n        node,\n        nodeId,\n        nodeKey,\n        nodeByKey = new Map;\n\n    if (path != null) {\n      const I = nodes.map((d, i) => normalize(path(d, i, data)));\n      const P = I.map(parentof);\n      const S = new Set(I).add(\"\");\n      for (const i of P) {\n        if (!S.has(i)) {\n          S.add(i);\n          I.push(i);\n          P.push(parentof(i));\n          nodes.push(imputed);\n        }\n      }\n      currentId = (_, i) => I[i];\n      currentParentId = (_, i) => P[i];\n    }\n\n    for (i = 0, n = nodes.length; i < n; ++i) {\n      d = nodes[i], node = nodes[i] = new Node(d);\n      if ((nodeId = currentId(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = node.id = nodeId;\n        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n      }\n      if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += \"\")) {\n        node.parent = nodeId;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (nodeId = node.parent) {\n        parent = nodeByKey.get(nodeId);\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      } else {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n\n    // When imputing internal nodes, only introduce roots if needed.\n    // Then replace the imputed marker data with null.\n    if (path != null) {\n      while (root.data === imputed && root.children.length === 1) {\n        root = root.children[0], --n;\n      }\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        node = nodes[i];\n        if (node.data !== imputed) break;\n        node.data = null;\n      }\n    }\n\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = optional(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = optional(x), stratify) : parentId;\n  };\n\n  stratify.path = function(x) {\n    return arguments.length ? (path = optional(x), stratify) : path;\n  };\n\n  return stratify;\n}\n\n// To normalize a path, we coerce to a string, strip the trailing slash if any\n// (as long as the trailing slash is not immediately preceded by another slash),\n// and add leading slash if missing.\nfunction normalize(path) {\n  path = `${path}`;\n  let i = path.length;\n  if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);\n  return path[0] === \"/\" ? path : `/${path}`;\n}\n\n// Walk backwards to find the first slash that is not the leading slash, e.g.:\n// \"/foo/bar\" ⇥ \"/foo\", \"/foo\" ⇥ \"/\", \"/\" ↦ \"\". (The root is special-cased\n// because the id of the root must be a truthy value.)\nfunction parentof(path) {\n  let i = path.length;\n  if (i < 2) return \"\";\n  while (--i > 1) if (slash(path, i)) break;\n  return path.slice(0, i);\n}\n\n// Slashes can be escaped; to determine whether a slash is a path delimiter, we\n// count the number of preceding backslashes escaping the forward slash: an odd\n// number indicates an escaped forward slash.\nfunction slash(path, i) {\n  if (path[i] === \"/\") {\n    let k = 0;\n    while (i > 0 && path[--i] === \"\\\\\") ++k;\n    if ((k & 1) === 0) return true;\n  }\n  return false;\n}\n",
      "start": 1707611014208,
      "end": 1707611014228,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707611014228,
      "end": 1707611014228,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707611014228,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707611014229,
      "end": 1707611014229,
      "order": "normal"
    }
  ]
}
