{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-geo/src/clip/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {epsilon, halfPi} from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n",
      "start": 1707611463277,
      "end": 1707611463288,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707611463288,
      "end": 1707611463288,
      "order": "normal"
    }
  ]
}
