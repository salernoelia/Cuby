{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-contour/src/density.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {blur2, max, ticks} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport constant from \"./constant.js\";\nimport Contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function grid(data) {\n    var values = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k),\n        i = -1;\n\n    for (const d of data) {\n      var xi = (x(d, ++i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n      if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    }\n\n    blur2({data: values, width: n, height: m}, r * pow2k);\n    return values;\n  }\n\n  function density(data) {\n    var values = grid(data),\n        tz = threshold(values),\n        pow4k = Math.pow(2, 2 * k);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = ticks(Number.MIN_VALUE, max(values) / pow4k, tz);\n    }\n\n    return Contours()\n        .size([n, m])\n        .thresholds(tz.map(d => d * pow4k))\n      (values)\n        .map((c, i) => (c.value = +tz[i], transform(c)));\n  }\n\n  density.contours = function(data) {\n    var values = grid(data),\n        contours = Contours().size([n, m]),\n        pow4k = Math.pow(2, 2 * k),\n        contour = value => {\n          value = +value;\n          var c = transform(contours.contour(values, value * pow4k));\n          c.value = value; // preserve exact threshold value\n          return c;\n        };\n    Object.defineProperty(contour, \"max\", {get: () => max(values) / pow4k});\n    return contour;\n  };\n\n  function transform(geometry) {\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0], _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();\n  };\n\n  return density;\n}\n",
      "start": 1707611014160,
      "end": 1707611014180,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707611014180,
      "end": 1707611014180,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014180,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707611014181,
      "end": 1707611014181,
      "order": "normal"
    }
  ]
}
