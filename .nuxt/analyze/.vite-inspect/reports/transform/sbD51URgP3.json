{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-geo/src/polygonContains.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {Adder} from \"d3-array\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the pointâ€™s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n",
      "start": 1710766540674,
      "end": 1710766540686,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710766540686,
      "end": 1710766540686,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710766540686,
      "end": 1710766540687,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710766540687,
      "end": 1710766540687,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710766540687,
      "end": 1710766540687,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710766540687,
      "end": 1710766540687,
      "order": "normal"
    }
  ]
}
