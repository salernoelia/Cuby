{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-force/src/link.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n",
      "start": 1707672315565,
      "end": 1707672315578,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707672315578,
      "end": 1707672315578,
      "order": "normal"
    }
  ]
}
