{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-array/src/blur.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "export function blur(values, r) {\n  if (!((r = +r) >= 0)) throw new RangeError(\"invalid r\");\n  let length = values.length;\n  if (!((length = Math.floor(length)) >= 0)) throw new RangeError(\"invalid length\");\n  if (!length || !r) return values;\n  const blur = blurf(r);\n  const temp = values.slice();\n  blur(values, temp, 0, length, 1);\n  blur(temp, values, 0, length, 1);\n  blur(values, temp, 0, length, 1);\n  return values;\n}\n\nexport const blur2 = Blur2(blurf);\n\nexport const blurImage = Blur2(blurfImage);\n\nfunction Blur2(blur) {\n  return function(data, rx, ry = rx) {\n    if (!((rx = +rx) >= 0)) throw new RangeError(\"invalid rx\");\n    if (!((ry = +ry) >= 0)) throw new RangeError(\"invalid ry\");\n    let {data: values, width, height} = data;\n    if (!((width = Math.floor(width)) >= 0)) throw new RangeError(\"invalid width\");\n    if (!((height = Math.floor(height !== undefined ? height : values.length / width)) >= 0)) throw new RangeError(\"invalid height\");\n    if (!width || !height || (!rx && !ry)) return data;\n    const blurx = rx && blur(rx);\n    const blury = ry && blur(ry);\n    const temp = values.slice();\n    if (blurx && blury) {\n      blurh(blurx, temp, values, width, height);\n      blurh(blurx, values, temp, width, height);\n      blurh(blurx, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n      blurv(blury, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n    } else if (blurx) {\n      blurh(blurx, values, temp, width, height);\n      blurh(blurx, temp, values, width, height);\n      blurh(blurx, values, temp, width, height);\n    } else if (blury) {\n      blurv(blury, values, temp, width, height);\n      blurv(blury, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n    }\n    return data;\n  };\n}\n\nfunction blurh(blur, T, S, w, h) {\n  for (let y = 0, n = w * h; y < n;) {\n    blur(T, S, y, y += w, 1);\n  }\n}\n\nfunction blurv(blur, T, S, w, h) {\n  for (let x = 0, n = w * h; x < w; ++x) {\n    blur(T, S, x, x + n, w);\n  }\n}\n\nfunction blurfImage(radius) {\n  const blur = blurf(radius);\n  return (T, S, start, stop, step) => {\n    start <<= 2, stop <<= 2, step <<= 2;\n    blur(T, S, start + 0, stop + 0, step);\n    blur(T, S, start + 1, stop + 1, step);\n    blur(T, S, start + 2, stop + 2, step);\n    blur(T, S, start + 3, stop + 3, step);\n  };\n}\n\n// Given a target array T, a source array S, sets each value T[i] to the average\n// of {S[i - r], …, S[i], …, S[i + r]}, where r = ⌊radius⌋, start <= i < stop,\n// for each i, i + step, i + 2 * step, etc., and where S[j] is clamped between\n// S[start] (inclusive) and S[stop] (exclusive). If the given radius is not an\n// integer, S[i - r - 1] and S[i + r + 1] are added to the sum, each weighted\n// according to r - ⌊radius⌋.\nfunction blurf(radius) {\n  const radius0 = Math.floor(radius);\n  if (radius0 === radius) return bluri(radius);\n  const t = radius - radius0;\n  const w = 2 * radius + 1;\n  return (T, S, start, stop, step) => { // stop must be aligned!\n    if (!((stop -= step) >= start)) return; // inclusive stop\n    let sum = radius0 * S[start];\n    const s0 = step * radius0;\n    const s1 = s0 + step;\n    for (let i = start, j = start + s0; i < j; i += step) {\n      sum += S[Math.min(stop, i)];\n    }\n    for (let i = start, j = stop; i <= j; i += step) {\n      sum += S[Math.min(stop, i + s0)];\n      T[i] = (sum + t * (S[Math.max(start, i - s1)] + S[Math.min(stop, i + s1)])) / w;\n      sum -= S[Math.max(start, i - s0)];\n    }\n  };\n}\n\n// Like blurf, but optimized for integer radius.\nfunction bluri(radius) {\n  const w = 2 * radius + 1;\n  return (T, S, start, stop, step) => { // stop must be aligned!\n    if (!((stop -= step) >= start)) return; // inclusive stop\n    let sum = radius * S[start];\n    const s = step * radius;\n    for (let i = start, j = start + s; i < j; i += step) {\n      sum += S[Math.min(stop, i)];\n    }\n    for (let i = start, j = stop; i <= j; i += step) {\n      sum += S[Math.min(stop, i + s)];\n      T[i] = sum / w;\n      sum -= S[Math.max(start, i - s)];\n    }\n  };\n}\n",
      "start": 1710766540208,
      "end": 1710766540253,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710766540253,
      "end": 1710766540253,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710766540253,
      "end": 1710766540254,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710766540254,
      "end": 1710766540254,
      "order": "normal"
    }
  ]
}
