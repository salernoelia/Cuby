{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-dispatch/src/dispatch.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n",
      "start": 1707611014160,
      "end": 1707611014184,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707611014184,
      "end": 1707611014184,
      "order": "normal"
    }
  ]
}
