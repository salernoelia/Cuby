{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-geo/src/clip/circle.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 тип n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n",
      "start": 1707675067446,
      "end": 1707675067464,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707675067464,
      "end": 1707675067464,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707675067464,
      "end": 1707675067464,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707675067464,
      "end": 1707675067464,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707675067464,
      "end": 1707675067464,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707675067464,
      "end": 1707675067464,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707675067465,
      "end": 1707675067465,
      "order": "normal"
    }
  ]
}
