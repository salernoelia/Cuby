{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-hierarchy/src/treemap/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport {required} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n",
      "start": 1707611014210,
      "end": 1707611014234,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707611014234,
      "end": 1707611014234,
      "order": "normal"
    }
  ]
}
