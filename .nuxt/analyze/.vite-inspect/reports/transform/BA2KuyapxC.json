{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-geo/src/projection/resample.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {cartesian} from \"../cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math.js\";\nimport {transformer} from \"../transform.js\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n",
      "start": 1707675067697,
      "end": 1707675067714,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707675067714,
      "end": 1707675067714,
      "order": "normal"
    }
  ]
}
