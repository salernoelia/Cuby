{
  "resolvedId": "/Users/eliasalerno/GitHub/Cuby/node_modules/d3-geo/src/clip/antimeridian.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n",
      "start": 1707672315575,
      "end": 1707672315593,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707672315593,
      "end": 1707672315593,
      "order": "normal"
    }
  ]
}
